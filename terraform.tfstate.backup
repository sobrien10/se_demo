{
  "version": 4,
  "terraform_version": "0.12.28",
  "serial": 469,
  "lineage": "df8c40df-aba7-2ea4-8ff3-6a84f921bbee",
  "outputs": {
    "f5_password": {
      "value": "014ymkpO6W",
      "type": "string"
    },
    "f5_pub_cidr": {
      "value": "10.0.2.0/24",
      "type": "string"
    },
    "f5_pub_ip": {
      "value": "10.0.2.10",
      "type": "string"
    },
    "f5_tmui": {
      "value": "https://18.133.52.15",
      "type": "string"
    },
    "f5_user": {
      "value": "admin",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "f5_ami",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:eu-west-2::image/ami-0fe284d68b7936ab6",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-04ef4a921ca9fdd93",
                  "volume_size": "76",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2020-07-08T00:48:48.000Z",
            "description": "F5 BIGIP-15.1.0.4-0.0.6 PAYG-Better 25Mbps-200618225543",
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "F5*BIGIP-15.1.0.4*Better*25Mbps*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0fe284d68b7936ab6",
            "image_id": "ami-0fe284d68b7936ab6",
            "image_location": "aws-marketplace/F5 BIGIP-15.1.0.4-0.0.6 PAYG-Better 25Mbps-200618225543-63f7b910-af5e-4aa0-9358-d66b7c51ebaa-ami-0ea514fcd3f743412.4",
            "image_owner_alias": "aws-marketplace",
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "F5 BIGIP-15.1.0.4-0.0.6 PAYG-Better 25Mbps-200618225543-63f7b910-af5e-4aa0-9358-d66b7c51ebaa-ami-0ea514fcd3f743412.4",
            "name_regex": null,
            "owner_id": "679593333241",
            "owners": [
              "679593333241"
            ],
            "platform": null,
            "product_codes": [
              {
                "product_code_id": "5x25i6gbbamyu00x1p90k0qsq",
                "product_code_type": "marketplace"
              }
            ],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-04ef4a921ca9fdd93",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "flow_log_cloudwatch_assume_role",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "vpc_flow_log_cloudwatch",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "data",
      "type": "aws_subnet",
      "name": "f5_pub_data",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:subnet/subnet-0be136f990be2da9b",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-2a",
            "availability_zone_id": "euw2-az2",
            "cidr_block": "10.0.2.0/24",
            "default_for_az": false,
            "filter": null,
            "id": "subnet-0be136f990be2da9b",
            "ipv6_cidr_block": null,
            "ipv6_cidr_block_association_id": null,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "498142139943",
            "state": "available",
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc-public-eu-west-2a"
            },
            "vpc_id": "vpc-0a85a930150a38060"
          }
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "access_analyzer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "acm_pca",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "apigw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "appmesh_envoy_management",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "appstream",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "athena",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "auto_scaling_plans",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloud_directory",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloudformation",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloudtrail",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codebuild",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codepipeline",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "config",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "datasync",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ebs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ec2",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ec2_autoscaling",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ec2messages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecr_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecr_dkr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs_agent",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs_telemetry",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "efs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "elastic_inference_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "elasticbeanstalk",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "elasticbeanstalk_health",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "elasticloadbalancing",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "emr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "events",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "git_codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "glue",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kinesis_firehose",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kinesis_streams",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "logs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "monitoring",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "qldb_session",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "rekognition",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_notebook",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "secretsmanager",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "servicecatalog",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ses",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sns",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sqs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ssm",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ssmmessages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "states",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "storagegateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sts",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "transfer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "transferserver",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "workspaces",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "f5_init",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "e9374ba6b0a417ed4117ae753bcb213ce0dfe67f06fa12ca3c0fe28f16d88067",
            "rendered": "#!/bin/bash\n# aws\n# Script must be non-blocking or run in the background.\nmkdir -p /config/cloud\ncat \u003c\u003c 'EOF' \u003e /config/cloud/startup-script.sh\n#!/bin/bash\n\n#############################\n# BIG-IPS ONBOARD SCRIPT\n#############################\nLOG_FILE=/var/log/startup-script.log\nif [ ! -e $LOG_FILE ]\nthen\n     touch $LOG_FILE\n     exec \u0026\u003e\u003e$LOG_FILE\nelse\n    #if file exists, exit as only want to run once\n    exit\nfi\nexec 1\u003e$LOG_FILE 2\u003e\u00261\n\n#############################\n# CHECK TO SEE NETWORK IS READY\n#############################\ncount=0\nwhile true\ndo\n  STATUS=$(curl -s -k -I https://github.com | grep HTTP)\n  if [[ $STATUS == *\"200\"* ]]; then\n    echo \"internet access check passed\"\n    break\n  elif [ $count -le 6 ]; then\n    echo \"Status code: $STATUS  Not done yet...\"\n    count=$[$count+1]\n  else\n    echo \"GIVE UP...\"\n    break\n  fi\n  sleep 10\ndone\n\n#############################\n# WAIT FOR BIG-IP SYSTEMS \u0026 API TO BE UP\n#############################\ncurl -o /config/cloud/utils.sh -s --fail --retry 60 -m 10 -L https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/develop/scripts/util.sh\n. /config/cloud/utils.sh\nwait_for_bigip\n\n#############################\n# WORKAROUND TO INCREASE MEMORY, TO HANDLE ALL \n# AUTOMATION TOOLCHAIN PKGS\n#############################\n# echo \"WORKAROUND TO INCREASE TOOLCHAIN MEMORY - START\"\n# date\n# # Modify restjavad memory\n# tmsh modify sys db provision.extramb value 1000\n# tmsh modify sys db restjavad.useextramb value true\n# tmsh save sys config\n# tmsh restart sys service restjavad\n# echo \"WORKAROUND TO INCREASE TOOLCHAIN MEMORY - DONE\"\n\n#############################\n### SET BIG-IP PASSWORD\n#############################\necho \"SET THE BIG-IP PASSWORD\"\npwd=014ymkpO6W\nif [ -z \"$pwd\" ]\nthen\n  echo \"ERROR: UNABLE TO OBTAIN PASSWORD\"\nelse\n  tmsh modify auth user admin password $pwd\nfi\n\n#############################\n## IAPPS DIR FIX\n#############################\n# # start modify appdata directory size\n# echo \"setting app directory size\"\n# tmsh show sys disk directory /appdata\n# # 130,985,984 26,128,384 52,256,768\n# tmsh modify /sys disk directory /appdata new-size 52256768\n# tmsh show sys disk directory /appdata\n# echo \"done setting app directory size\"\n# tmsh save sys config\n# # end modify appdata directory size\n\n#############################\n### GET ATC VERSIONS \u0026 URLS\n#############################\n## set vars\n# constants\nrpmInstallUrl=\"/mgmt/shared/iapp/package-management-tasks\"\nrpmFilePath=\"/var/config/rest/downloads\"\nlocal_host=\"http://localhost:8100\"\n# do\ndoUrl=\"/mgmt/shared/declarative-onboarding\"\ndoCheckUrl=\"/mgmt/shared/declarative-onboarding/info\"\ndoTaskUrl=\"/mgmt/shared/declarative-onboarding/task\"\n# as3\nas3Url=\"/mgmt/shared/appsvcs/declare\"\nas3CheckUrl=\"/mgmt/shared/appsvcs/info\"\nas3TaskUrl=\"/mgmt/shared/appsvcs/task\"\n# ts\ntsUrl=\"/mgmt/shared/telemetry/declare\"\ntsCheckUrl=\"/mgmt/shared/telemetry/info\" \n# cloud failover ext\ncfUrl=\"/mgmt/shared/cloud-failover/declare\"\ncfCheckUrl=\"/mgmt/shared/cloud-failover/info\"\n# fast\nfastCheckUrl=\"/mgmt/shared/fast/info\"\n# vars\nmgmt_port=`tmsh list sys httpd ssl-port | grep ssl-port | sed 's/ssl-port //;s/ //g'`\n# admin_username='$uname'\nadmin_password='$pwd'\n# CREDS=\"$admin_username:$admin_password\"\nCREDS=\"admin:$admin_password\"\ntoolsList=$(cat -\u003c\u003cEND_TOOLS\n{\n  \"tools\": [\n      {\n        \"name\": \"f5-declarative-onboarding\",\n        \"version\": \"latest\"\n      },\n      {\n        \"name\": \"f5-appsvcs-extension\",\n        \"version\": \"latest\"\n      },\n      {\n        \"name\": \"f5-telemetry-streaming\",\n        \"version\": \"latest\"\n      },\n      {\n        \"name\": \"f5-cloud-failover-extension\",\n        \"version\": \"latest\"\n      },\n      {\n        \"name\": \"f5-appsvcs-templates\",\n        \"version\": \"latest\"\n      }\n  ]\n}\nEND_TOOLS\n)\n\n#############################\n# GET ATC PACKAGES\n#############################\nfunction getAtc () {\natc=$(echo $toolsList | jq -r .tools[].name)\nfor tool in $atc\ndo\n    version=$(echo $toolsList | jq -r \".tools[]| select(.name| contains (\\\"$tool\\\")).version\")\n    if [ $version == \"latest\" ]; then\n        path=''\n    else\n        path='tags/v'\n    fi\n    echo \"downloading $tool, $version\"\n    if [ $tool == \"f5-new-tool\" ]; then\n        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/f5devcentral/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (\".rpm\")) | .browser_download_url')\n    else\n        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/F5Networks/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (\".rpm\")) | .browser_download_url')\n    fi\n    for file in $files\n    do\n    echo \"download: $file\"\n    name=$(basename $file )\n    # make download dir\n    mkdir -p /var/config/rest/downloads\n    result=$(/usr/bin/curl -Lsk  $file -o /var/config/rest/downloads/$name)\n    done\ndone\necho \"DOWNLOADS COMPLETE\"\n}\n# download the rpms\ngetAtc\n#\n\n#############################\n### INSTALL ATC PACKAGES\n#############################\necho \"INSTALL ATC PACKAGES\"\nrpms=$(find $rpmFilePath -name \"*.rpm\" -type f)\necho $rpms\nfor rpm in $rpms\ndo\n  filename=$(basename $rpm)\n  echo \"installing $filename\"\n  if [ -f $rpmFilePath/$filename ]; then\n     postBody=\"{\\\"operation\\\":\\\"INSTALL\\\",\\\"packageFilePath\\\":\\\"$rpmFilePath/$filename\\\"}\"\n     while true\n     do\n        iappApiStatus=$(curl -i -u \"$CREDS\"  $local_host$rpmInstallUrl | grep HTTP | awk '{print $2}')\n        case $iappApiStatus in \n            404)\n                echo \"api not ready status: $iappApiStatus\"\n                sleep 2\n                ;;\n            200)\n                echo \"api ready starting install task $filename\"\n                install=$(restcurl -u \"$CREDS\" -X POST -d $postBody $rpmInstallUrl | jq -r .id )\n                break\n                ;;\n              *)\n                echo \"other error status: $iappApiStatus\"\n                debug=$(restcurl -u \"$CREDS\" $rpmInstallUrl)\n                echo \"ipp install debug: $debug\"\n                ;;\n        esac\n    done\n  else\n    echo \" file: $filename not found\"\n  fi \n  while true\n  do\n    status=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq -r .status)\n    case $status in \n        FINISHED)\n            # finished\n            echo \" rpm: $filename task: $install status: $status\"\n            break\n            ;;\n        STARTED)\n            # started\n            echo \" rpm: $filename task: $install status: $status\"\n            ;;\n        RUNNING)\n            # running\n            echo \" rpm: $filename task: $install status: $status\"\n            ;;\n        FAILED)\n            # failed\n            error=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq .errorMessage)\n            echo \"failed $filename task: $install error: $error\"\n            break\n            ;;\n        *)\n            # other\n            debug=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq . )\n            echo \"failed $filename task: $install error: $debug\"\n            ;;\n        esac\n    sleep 2\n    done\ndone\n\n#############################\n### VALIDATE ATC PKGS\n#############################\nfunction checkDO() {\n    # Check DO Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    #doStatus=$(curl -i -u \"$CREDS\" $local_host$doCheckUrl | grep HTTP | awk '{print $2}')\n    doStatusType=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r type )\n    if [ \"$doStatusType\" == \"object\" ]; then\n        doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .code)\n        if [ $? == 1 ]; then\n            doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .result.code)\n        fi\n    elif [ \"$doStatusType\" == \"array\" ]; then\n        doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .[].result.code)\n    else\n        echo \"unknown type:$doStatusType\"\n    fi\n    echo \"status $doStatus\"\n    if [[ $doStatus == \"200\" ]]; then\n        #version=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .version)\n        version=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .[].version)\n        echo \"Declarative Onboarding $version online \"\n        break\n    elif [[ $doStatus == \"404\" ]]; then\n        echo \"DO Status: $doStatus\"\n        bigstart restart restnoded\n        sleep 60\n        bigstart status restnoded | grep running\n        status=$?\n        echo \"restnoded:$status\"\n    else\n        echo \"DO Status $doStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkAS3() {\n    # Check AS3 Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    #as3Status=$(curl -i -u \"$CREDS\" $local_host$as3CheckUrl | grep HTTP | awk '{print $2}')\n    as3Status=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r .code)\n    if  [ \"$as3Status\" == \"null\" ] || [ -z \"$as3Status\" ]; then\n        type=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r type )\n        if [ \"$type\" == \"object\" ]; then\n            as3Status=\"200\"\n        fi\n    fi\n    if [[ $as3Status == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r .version)\n        echo \"As3 $version online \"\n        break\n    elif [[ $as3Status == \"404\" ]]; then\n        echo \"AS3 Status $as3Status\"\n        bigstart restart restnoded\n        sleep 60\n        bigstart status restnoded | grep running\n        status=$?\n        echo \"restnoded:$status\"\n    else\n        echo \"AS3 Status $as3Status\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkTS() {\n    # Check TS Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    tsStatus=$(curl -si -u \"$CREDS\" $local_host$tsCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $tsStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $tsCheckUrl | jq -r .version)\n        echo \"Telemetry Streaming $version online \"\n        break\n    else\n        echo \"TS Status $tsStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkCF() {\n    # Check CF Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    cfStatus=$(curl -si -u \"$CREDS\" $local_host$cfCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $cfStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $cfCheckUrl | jq -r .version)\n        echo \"Cloud failover $version online \"\n        break\n    else\n        echo \"Cloud Failover Status $cfStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkFAST() {\n    # Check FAST Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    fastStatus=$(curl -si -u \"$CREDS\" $local_host$fastCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $fastStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $fastCheckUrl | jq -r .version)\n        echo \"FAST $version online \"\n        break\n    else\n        echo \"FAST Status $fastStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\n\n#############################\n### CHECK ATC APIS ARE UP\n#############################\nfunction checkATC() {\n    doStatus=$(checkDO)\n    as3Status=$(checkAS3)\n    tsStatus=$(checkTS)\n    cfStatus=$(checkCF)\n    fastStatus=$(checkFAST)\n    if [[ $doStatus == *\"online\"* ]] \u0026\u0026 [[ \"$as3Status\" = *\"online\"* ]] \u0026\u0026 [[ $tsStatus == *\"online\"* ]] \u0026\u0026 [[ $cfStatus == *\"online\"* ]] \u0026\u0026 [[ $cfStatus == *\"online\"* ]] ; then \n        echo \"ATC is ready to accept API calls\"\n    else\n        echo \"ATC install failed or ATC is not ready to accept API calls\"\n        break\n    fi   \n}\ncheckATC\n\n#############################\n### CLEAN UP AND FINISH\n#############################\nrm /config/cloud/startup-script.sh \ndate\necho \"FINISHED STARTUP SCRIPT\"\nEOF\n# Now run in the background to not block startup\nchmod 755 /config/cloud/startup-script.sh \nnohup /config/cloud/startup-script.sh \u0026",
            "template": "#!/bin/bash\n# aws\n# Script must be non-blocking or run in the background.\nmkdir -p /config/cloud\ncat \u003c\u003c 'EOF' \u003e /config/cloud/startup-script.sh\n#!/bin/bash\n\n#############################\n# BIG-IPS ONBOARD SCRIPT\n#############################\nLOG_FILE=${onboard_log}\nif [ ! -e $LOG_FILE ]\nthen\n     touch $LOG_FILE\n     exec \u0026\u003e\u003e$LOG_FILE\nelse\n    #if file exists, exit as only want to run once\n    exit\nfi\nexec 1\u003e$LOG_FILE 2\u003e\u00261\n\n#############################\n# CHECK TO SEE NETWORK IS READY\n#############################\ncount=0\nwhile true\ndo\n  STATUS=$(curl -s -k -I https://github.com | grep HTTP)\n  if [[ $STATUS == *\"200\"* ]]; then\n    echo \"internet access check passed\"\n    break\n  elif [ $count -le 6 ]; then\n    echo \"Status code: $STATUS  Not done yet...\"\n    count=$[$count+1]\n  else\n    echo \"GIVE UP...\"\n    break\n  fi\n  sleep 10\ndone\n\n#############################\n# WAIT FOR BIG-IP SYSTEMS \u0026 API TO BE UP\n#############################\ncurl -o /config/cloud/utils.sh -s --fail --retry 60 -m 10 -L https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/develop/scripts/util.sh\n. /config/cloud/utils.sh\nwait_for_bigip\n\n#############################\n# WORKAROUND TO INCREASE MEMORY, TO HANDLE ALL \n# AUTOMATION TOOLCHAIN PKGS\n#############################\n# echo \"WORKAROUND TO INCREASE TOOLCHAIN MEMORY - START\"\n# date\n# # Modify restjavad memory\n# tmsh modify sys db provision.extramb value 1000\n# tmsh modify sys db restjavad.useextramb value true\n# tmsh save sys config\n# tmsh restart sys service restjavad\n# echo \"WORKAROUND TO INCREASE TOOLCHAIN MEMORY - DONE\"\n\n#############################\n### SET BIG-IP PASSWORD\n#############################\necho \"SET THE BIG-IP PASSWORD\"\npwd=${password}\nif [ -z \"$pwd\" ]\nthen\n  echo \"ERROR: UNABLE TO OBTAIN PASSWORD\"\nelse\n  tmsh modify auth user admin password $pwd\nfi\n\n#############################\n## IAPPS DIR FIX\n#############################\n# # start modify appdata directory size\n# echo \"setting app directory size\"\n# tmsh show sys disk directory /appdata\n# # 130,985,984 26,128,384 52,256,768\n# tmsh modify /sys disk directory /appdata new-size 52256768\n# tmsh show sys disk directory /appdata\n# echo \"done setting app directory size\"\n# tmsh save sys config\n# # end modify appdata directory size\n\n#############################\n### GET ATC VERSIONS \u0026 URLS\n#############################\n## set vars\n# constants\nrpmInstallUrl=\"/mgmt/shared/iapp/package-management-tasks\"\nrpmFilePath=\"/var/config/rest/downloads\"\nlocal_host=\"http://localhost:8100\"\n# do\ndoUrl=\"/mgmt/shared/declarative-onboarding\"\ndoCheckUrl=\"/mgmt/shared/declarative-onboarding/info\"\ndoTaskUrl=\"/mgmt/shared/declarative-onboarding/task\"\n# as3\nas3Url=\"/mgmt/shared/appsvcs/declare\"\nas3CheckUrl=\"/mgmt/shared/appsvcs/info\"\nas3TaskUrl=\"/mgmt/shared/appsvcs/task\"\n# ts\ntsUrl=\"/mgmt/shared/telemetry/declare\"\ntsCheckUrl=\"/mgmt/shared/telemetry/info\" \n# cloud failover ext\ncfUrl=\"/mgmt/shared/cloud-failover/declare\"\ncfCheckUrl=\"/mgmt/shared/cloud-failover/info\"\n# fast\nfastCheckUrl=\"/mgmt/shared/fast/info\"\n# vars\nmgmt_port=`tmsh list sys httpd ssl-port | grep ssl-port | sed 's/ssl-port //;s/ //g'`\n# admin_username='$uname'\nadmin_password='$pwd'\n# CREDS=\"$admin_username:$admin_password\"\nCREDS=\"admin:$admin_password\"\ntoolsList=$(cat -\u003c\u003cEND_TOOLS\n{\n  \"tools\": [\n      {\n        \"name\": \"f5-declarative-onboarding\",\n        \"version\": \"${doVersion}\"\n      },\n      {\n        \"name\": \"f5-appsvcs-extension\",\n        \"version\": \"${as3Version}\"\n      },\n      {\n        \"name\": \"f5-telemetry-streaming\",\n        \"version\": \"${tsVersion}\"\n      },\n      {\n        \"name\": \"f5-cloud-failover-extension\",\n        \"version\": \"${cfVersion}\"\n      },\n      {\n        \"name\": \"f5-appsvcs-templates\",\n        \"version\": \"${fastVersion}\"\n      }\n  ]\n}\nEND_TOOLS\n)\n\n#############################\n# GET ATC PACKAGES\n#############################\nfunction getAtc () {\natc=$(echo $toolsList | jq -r .tools[].name)\nfor tool in $atc\ndo\n    version=$(echo $toolsList | jq -r \".tools[]| select(.name| contains (\\\"$tool\\\")).version\")\n    if [ $version == \"latest\" ]; then\n        path=''\n    else\n        path='tags/v'\n    fi\n    echo \"downloading $tool, $version\"\n    if [ $tool == \"f5-new-tool\" ]; then\n        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/f5devcentral/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (\".rpm\")) | .browser_download_url')\n    else\n        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/F5Networks/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (\".rpm\")) | .browser_download_url')\n    fi\n    for file in $files\n    do\n    echo \"download: $file\"\n    name=$(basename $file )\n    # make download dir\n    mkdir -p /var/config/rest/downloads\n    result=$(/usr/bin/curl -Lsk  $file -o /var/config/rest/downloads/$name)\n    done\ndone\necho \"DOWNLOADS COMPLETE\"\n}\n# download the rpms\ngetAtc\n#\n\n#############################\n### INSTALL ATC PACKAGES\n#############################\necho \"INSTALL ATC PACKAGES\"\nrpms=$(find $rpmFilePath -name \"*.rpm\" -type f)\necho $rpms\nfor rpm in $rpms\ndo\n  filename=$(basename $rpm)\n  echo \"installing $filename\"\n  if [ -f $rpmFilePath/$filename ]; then\n     postBody=\"{\\\"operation\\\":\\\"INSTALL\\\",\\\"packageFilePath\\\":\\\"$rpmFilePath/$filename\\\"}\"\n     while true\n     do\n        iappApiStatus=$(curl -i -u \"$CREDS\"  $local_host$rpmInstallUrl | grep HTTP | awk '{print $2}')\n        case $iappApiStatus in \n            404)\n                echo \"api not ready status: $iappApiStatus\"\n                sleep 2\n                ;;\n            200)\n                echo \"api ready starting install task $filename\"\n                install=$(restcurl -u \"$CREDS\" -X POST -d $postBody $rpmInstallUrl | jq -r .id )\n                break\n                ;;\n              *)\n                echo \"other error status: $iappApiStatus\"\n                debug=$(restcurl -u \"$CREDS\" $rpmInstallUrl)\n                echo \"ipp install debug: $debug\"\n                ;;\n        esac\n    done\n  else\n    echo \" file: $filename not found\"\n  fi \n  while true\n  do\n    status=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq -r .status)\n    case $status in \n        FINISHED)\n            # finished\n            echo \" rpm: $filename task: $install status: $status\"\n            break\n            ;;\n        STARTED)\n            # started\n            echo \" rpm: $filename task: $install status: $status\"\n            ;;\n        RUNNING)\n            # running\n            echo \" rpm: $filename task: $install status: $status\"\n            ;;\n        FAILED)\n            # failed\n            error=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq .errorMessage)\n            echo \"failed $filename task: $install error: $error\"\n            break\n            ;;\n        *)\n            # other\n            debug=$(restcurl -u \"$CREDS\" $rpmInstallUrl/$install | jq . )\n            echo \"failed $filename task: $install error: $debug\"\n            ;;\n        esac\n    sleep 2\n    done\ndone\n\n#############################\n### VALIDATE ATC PKGS\n#############################\nfunction checkDO() {\n    # Check DO Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    #doStatus=$(curl -i -u \"$CREDS\" $local_host$doCheckUrl | grep HTTP | awk '{print $2}')\n    doStatusType=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r type )\n    if [ \"$doStatusType\" == \"object\" ]; then\n        doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .code)\n        if [ $? == 1 ]; then\n            doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .result.code)\n        fi\n    elif [ \"$doStatusType\" == \"array\" ]; then\n        doStatus=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .[].result.code)\n    else\n        echo \"unknown type:$doStatusType\"\n    fi\n    echo \"status $doStatus\"\n    if [[ $doStatus == \"200\" ]]; then\n        #version=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .version)\n        version=$(restcurl -u \"$CREDS\" -X GET $doCheckUrl | jq -r .[].version)\n        echo \"Declarative Onboarding $version online \"\n        break\n    elif [[ $doStatus == \"404\" ]]; then\n        echo \"DO Status: $doStatus\"\n        bigstart restart restnoded\n        sleep 60\n        bigstart status restnoded | grep running\n        status=$?\n        echo \"restnoded:$status\"\n    else\n        echo \"DO Status $doStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkAS3() {\n    # Check AS3 Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    #as3Status=$(curl -i -u \"$CREDS\" $local_host$as3CheckUrl | grep HTTP | awk '{print $2}')\n    as3Status=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r .code)\n    if  [ \"$as3Status\" == \"null\" ] || [ -z \"$as3Status\" ]; then\n        type=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r type )\n        if [ \"$type\" == \"object\" ]; then\n            as3Status=\"200\"\n        fi\n    fi\n    if [[ $as3Status == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $as3CheckUrl | jq -r .version)\n        echo \"As3 $version online \"\n        break\n    elif [[ $as3Status == \"404\" ]]; then\n        echo \"AS3 Status $as3Status\"\n        bigstart restart restnoded\n        sleep 60\n        bigstart status restnoded | grep running\n        status=$?\n        echo \"restnoded:$status\"\n    else\n        echo \"AS3 Status $as3Status\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkTS() {\n    # Check TS Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    tsStatus=$(curl -si -u \"$CREDS\" $local_host$tsCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $tsStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $tsCheckUrl | jq -r .version)\n        echo \"Telemetry Streaming $version online \"\n        break\n    else\n        echo \"TS Status $tsStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkCF() {\n    # Check CF Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    cfStatus=$(curl -si -u \"$CREDS\" $local_host$cfCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $cfStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $cfCheckUrl | jq -r .version)\n        echo \"Cloud failover $version online \"\n        break\n    else\n        echo \"Cloud Failover Status $cfStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\nfunction checkFAST() {\n    # Check FAST Ready\n    count=0\n    while [ $count -le 4 ]\n    do\n    fastStatus=$(curl -si -u \"$CREDS\" $local_host$fastCheckUrl | grep HTTP | awk '{print $2}')\n    if [[ $fastStatus == \"200\" ]]; then\n        version=$(restcurl -u \"$CREDS\" -X GET $fastCheckUrl | jq -r .version)\n        echo \"FAST $version online \"\n        break\n    else\n        echo \"FAST Status $fastStatus\"\n        count=$[$count+1]\n    fi\n    sleep 10\n    done\n}\n\n#############################\n### CHECK ATC APIS ARE UP\n#############################\nfunction checkATC() {\n    doStatus=$(checkDO)\n    as3Status=$(checkAS3)\n    tsStatus=$(checkTS)\n    cfStatus=$(checkCF)\n    fastStatus=$(checkFAST)\n    if [[ $doStatus == *\"online\"* ]] \u0026\u0026 [[ \"$as3Status\" = *\"online\"* ]] \u0026\u0026 [[ $tsStatus == *\"online\"* ]] \u0026\u0026 [[ $cfStatus == *\"online\"* ]] \u0026\u0026 [[ $cfStatus == *\"online\"* ]] ; then \n        echo \"ATC is ready to accept API calls\"\n    else\n        echo \"ATC install failed or ATC is not ready to accept API calls\"\n        break\n    fi   \n}\ncheckATC\n\n#############################\n### CLEAN UP AND FINISH\n#############################\nrm /config/cloud/startup-script.sh \ndate\necho \"FINISHED STARTUP SCRIPT\"\nEOF\n# Now run in the background to not block startup\nchmod 755 /config/cloud/startup-script.sh \nnohup /config/cloud/startup-script.sh \u0026",
            "vars": {
              "as3Version": "latest",
              "cfVersion": "latest",
              "doVersion": "latest",
              "fastVersion": "latest",
              "libs_dir": "/config/cloud/aws/node_modules",
              "onboard_log": "/var/log/startup-script.log",
              "password": "014ymkpO6W",
              "projectPrefix": "ob1",
              "tsVersion": "latest"
            }
          }
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "flow_log",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_customer_gateway",
      "name": "this",
      "each": "map",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_network_acl",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_security_group",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_vpc",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_egress_only_internet_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "mgmt",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": null,
            "associate_with_private_ip": "10.0.1.10",
            "association_id": "eipassoc-01869cf15cc23151c",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-08fc888a330846544",
            "instance": "i-0eddb068a78bf3984",
            "network_interface": "eni-007331c72e31f961d",
            "private_dns": "ip-10-0-1-10.eu-west-2.compute.internal",
            "private_ip": "10.0.1.10",
            "public_dns": "ec2-18-133-52-15.eu-west-2.compute.amazonaws.com",
            "public_ip": "18.133.52.15",
            "public_ipv4_pool": "amazon",
            "tags": {},
            "timeouts": null,
            "vpc": true
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_network_interface.mgmt",
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "public1",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": null,
            "associate_with_private_ip": "10.0.2.10",
            "association_id": "eipassoc-038beb88d0ca34a6d",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-05626fe0de1cecc11",
            "instance": "i-0eddb068a78bf3984",
            "network_interface": "eni-0fb92f95282dd2a5a",
            "private_dns": "ip-10-0-2-10.eu-west-2.compute.internal",
            "private_ip": "10.0.2.10",
            "public_dns": "ec2-18-133-72-145.eu-west-2.compute.amazonaws.com",
            "public_ip": "18.133.72.145",
            "public_ipv4_pool": "amazon",
            "tags": {},
            "timeouts": null,
            "vpc": true
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_network_interface.public",
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "public2",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": null,
            "associate_with_private_ip": "10.0.2.11",
            "association_id": "eipassoc-0b2a9fbc11de27ca5",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-043abf5976690dd66",
            "instance": "i-0eddb068a78bf3984",
            "network_interface": "eni-0fb92f95282dd2a5a",
            "private_dns": "ip-10-0-2-11.eu-west-2.compute.internal",
            "private_ip": "10.0.2.11",
            "public_dns": "ec2-35-176-61-234.eu-west-2.compute.amazonaws.com",
            "public_ip": "35.176.61.234",
            "public_ipv4_pool": "amazon",
            "tags": {},
            "timeouts": null,
            "vpc": true
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_network_interface.public",
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_elasticache_subnet_group",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_flow_log",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "vpc_flow_log_cloudwatch",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "vpc_flow_log_cloudwatch",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "vpc_flow_log_cloudwatch",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "big-ip",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0fe284d68b7936ab6",
            "arn": "arn:aws:ec2:eu-west-2:498142139943:instance/i-0eddb068a78bf3984",
            "associate_public_ip_address": true,
            "availability_zone": "eu-west-2a",
            "cpu_core_count": 2,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0eddb068a78bf3984",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "m5.xlarge",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "OB1-key-sews",
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_interface_id": "eni-007331c72e31f961d"
              },
              {
                "delete_on_termination": false,
                "device_index": 1,
                "network_interface_id": "eni-0fb92f95282dd2a5a"
              }
            ],
            "network_interface_id": null,
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-007331c72e31f961d",
            "private_dns": "ip-10-0-1-10.eu-west-2.compute.internal",
            "private_ip": "10.0.1.10",
            "public_dns": "",
            "public_ip": "18.133.52.15",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 228,
                "kms_key_id": "",
                "volume_id": "vol-008b399366f95aeb2",
                "volume_size": 76,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0d8a8a2e2acda7958",
            "tags": {
              "Name": "ob1-mybigip"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "f474b087dbe91118a3bf4e8af64592cd90f4183f",
            "user_data_base64": null,
            "volume_tags": {},
            "vpc_security_group_ids": [
              "sg-0ba7baf701aa962b4"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_network_interface.mgmt",
            "aws_network_interface.public",
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this",
            "random_string.password"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:internet-gateway/igw-00521963a5d46ed4d",
            "id": "igw-00521963a5d46ed4d",
            "owner_id": "498142139943",
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc"
            },
            "vpc_id": "vpc-0a85a930150a38060"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "database_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "database_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "elasticache_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "elasticache_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "intra_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "intra_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "private_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "private_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "public_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "public_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "redshift_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "redshift_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "mgmt",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "attachment": [
              {
                "attachment_id": "eni-attach-0a2f84ffe15e69ef4",
                "device_index": 0,
                "instance": "i-0eddb068a78bf3984"
              }
            ],
            "description": "",
            "id": "eni-007331c72e31f961d",
            "mac_address": "06:7b:7b:76:b9:04",
            "outpost_arn": "",
            "private_dns_name": "",
            "private_ip": "10.0.1.10",
            "private_ips": [
              "10.0.1.10"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-0ba7baf701aa962b4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0d8a8a2e2acda7958",
            "tags": {
              "Name": "mgmt_interface"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "public",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "attachment": [
              {
                "attachment_id": "eni-attach-07f5cc44846fa6f17",
                "device_index": 1,
                "instance": "i-0eddb068a78bf3984"
              }
            ],
            "description": "",
            "id": "eni-0fb92f95282dd2a5a",
            "mac_address": "06:c2:a3:61:dd:ae",
            "outpost_arn": "",
            "private_dns_name": "",
            "private_ip": "10.0.2.11",
            "private_ips": [
              "10.0.2.10",
              "10.0.2.11"
            ],
            "private_ips_count": 1,
            "security_groups": [
              "sg-0ba7baf701aa962b4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0be136f990be2da9b",
            "tags": {
              "Name": "public_interface"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_security_group.f5",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_redshift_subnet_group",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_internet_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_ipv6_egress",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_nat_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_ipv6_egress",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_nat_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-00521963a5d46ed4d",
            "id": "r-rtb-06881c11e986ad7721080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-06881c11e986ad772",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null
            },
            "transit_gateway_id": "",
            "vpc_peering_connection_id": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway_ipv6",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "rtb-06881c11e986ad772",
            "owner_id": "498142139943",
            "propagating_vgws": [],
            "route": [
              {
                "cidr_block": "0.0.0.0/0",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-00521963a5d46ed4d",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc-public"
            },
            "vpc_id": "vpc-0a85a930150a38060"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-02884ea93dca14adf",
            "route_table_id": "rtb-06881c11e986ad772",
            "subnet_id": "subnet-0d8a8a2e2acda7958"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-0a742420afdab2ef3",
            "route_table_id": "rtb-06881c11e986ad772",
            "subnet_id": "subnet-0be136f990be2da9b"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "redshift_public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "f5",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:security-group/sg-0ba7baf701aa962b4",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0ba7baf701aa962b4",
            "ingress": [
              {
                "cidr_blocks": [
                  "90.208.9.18/32"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "90.208.9.18/32"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "90.208.9.18/32"
                ],
                "description": "",
                "from_port": 8080,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8080
              },
              {
                "cidr_blocks": [
                  "90.208.9.18/32"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              },
              {
                "cidr_blocks": [
                  "90.208.9.18/32"
                ],
                "description": "",
                "from_port": 8443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8443
              }
            ],
            "name": "ob1-f5",
            "name_prefix": null,
            "owner_id": "498142139943",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "ob1-SecurityGroup1"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a85a930150a38060"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:subnet/subnet-0d8a8a2e2acda7958",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-2a",
            "availability_zone_id": "euw2-az2",
            "cidr_block": "10.0.1.0/24",
            "id": "subnet-0d8a8a2e2acda7958",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "498142139943",
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc-public-eu-west-2a"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a85a930150a38060"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:subnet/subnet-0be136f990be2da9b",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-2a",
            "availability_zone_id": "euw2-az2",
            "cidr_block": "10.0.2.0/24",
            "id": "subnet-0be136f990be2da9b",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "498142139943",
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc-public-eu-west-2a"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a85a930150a38060"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:498142139943:vpc/vpc-0a85a930150a38060",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-0141c31c593e5c075",
            "default_route_table_id": "rtb-0042b6039826b96ed",
            "default_security_group_id": "sg-026ed45b39a112744",
            "dhcp_options_id": "dopt-3da99954",
            "enable_classiclink": null,
            "enable_classiclink_dns_support": null,
            "enable_dns_hostnames": false,
            "enable_dns_support": true,
            "id": "vpc-0a85a930150a38060",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "main_route_table_id": "rtb-0042b6039826b96ed",
            "owner_id": "498142139943",
            "tags": {
              "Environment": "ob1-vpc-teraform",
              "Name": "ob1-f5-vpc"
            }
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_dhcp_options",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_dhcp_options_association",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "access_analyzer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "acm_pca",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "apigw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "appmesh_envoy_management",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "appstream",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "athena",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "auto_scaling_plans",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloud_directory",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloudformation",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloudtrail",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codebuild",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codepipeline",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "config",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "datasync",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ebs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2_autoscaling",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2messages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_dkr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs_agent",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs_telemetry",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "efs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "elastic_inference_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "elasticbeanstalk",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "elasticbeanstalk_health",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "elasticloadbalancing",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "emr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "events",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "git_codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "glue",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kinesis_firehose",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kinesis_streams",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "logs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "monitoring",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "qldb_session",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "rekognition",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_notebook",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "secretsmanager",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "servicecatalog",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ses",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sns",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sqs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssm",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssmmessages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "states",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "storagegateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sts",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "transfer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "transferserver",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "workspaces",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "intra_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "intra_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "private_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "private_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "public_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "public_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_ipv4_cidr_block_association",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_attachment",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_route_propagation",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_route_propagation",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_route_propagation",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "password",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "014ymkpO6W",
            "keepers": null,
            "length": 10,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "014ymkpO6W",
            "special": false,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}
